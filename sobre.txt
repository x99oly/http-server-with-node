server.js funciona como um class program (package.json {arq de config do projeto node.js} : module {explicita para uso backend})

bibliotecas/frameworks instaladas nesse projeto
. fastify
** extenções vs Code 
. REST client (para fazer e testar requisições http)

Criação de server http com node nativo ( Sem biblioteca externa)

import { createServer} from 'node:http' // Pra usar import tem que ter um package.json com type:module para usar js com poo

const server = createServer((request, response) => {
    response.write("oi")

    return response.end()
})

server.listen(3333)

*********************************************** MÉTODOS HTTP ***********************************************

GET: Buscar dados do servidor. Usado para solicitar dados de um recurso específico.

POST: Enviar dados para o servidor. Usado para criar um novo recurso ou enviar dados ao servidor.

PUT: Atualizar dados no servidor. Usado para substituir ou criar um recurso no servidor.

PATCH: Atualizar parcialmente um recurso no servidor. Usado para aplicar modificações parciais a um recurso existente.

DELETE: Remover dados do servidor. Usado para excluir um recurso específico.

HEAD: Buscar apenas os cabeçalhos de resposta do servidor, sem o corpo da resposta. Usado para obter metadados sobre um recurso.

OPTIONS: Obter informações sobre os métodos HTTP suportados por um servidor para um recurso específico. Usado para consulta de capacidades de comunicação.

TRACE: Realizar um teste de loopback, onde o servidor ecoa a solicitação recebida. Usado para depuração e diagnóstico.

CONNECT: Estabelecer um túnel para uma conexão de rede, frequentemente usado para criar um túnel SSL/TLS para HTTP seguro.

*********************************************** MÉTODOS HTTP ***********************************************


// *** ctrl+k > ctrl+u - Comentar bloco de código selecionado
